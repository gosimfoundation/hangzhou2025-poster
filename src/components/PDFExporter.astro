---
// PDFExporter component for exporting visible viewport to PDF
---

<button id="export-pdf-btn" class="pdf-export-btn">
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
    <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
    <polyline points="14 2 14 8 20 8"></polyline>
    <line x1="16" y1="13" x2="8" y2="13"></line>
    <line x1="16" y1="17" x2="8" y2="17"></line>
    <polyline points="10 9 9 9 8 9"></polyline>
  </svg>
  导出PDF
</button>

<style>
  .pdf-export-btn {
    position: fixed;
    bottom: 30px;
    right: 30px;
    background: #f4f593;
    color: #333;
    border: none;
    padding: 12px 20px;
    border-radius: 50px;
    font-size: 0.9rem;
    font-weight: 600;
    cursor: pointer;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    display: flex;
    align-items: center;
    gap: 8px;
    transition: all 0.3s ease;
    z-index: 1000;
  }

  .pdf-export-btn:hover {
    background: #e8e980;
    transform: translateY(-2px);
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);
  }

  .pdf-export-btn:active {
    transform: translateY(0);
  }

  .pdf-export-btn svg {
    width: 20px;
    height: 20px;
  }

  @media print {
    .pdf-export-btn {
      display: none;
    }
  }
</style>

<script>
  // Import html2pdf.js
  import html2pdf from 'html2pdf.js';

  document.addEventListener('DOMContentLoaded', () => {
    const exportBtn = document.getElementById('export-pdf-btn');
    
    if (exportBtn) {
      exportBtn.addEventListener('click', async () => {
        // Change button text to indicate processing
        const originalContent = exportBtn.innerHTML;
        exportBtn.innerHTML = '<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M12 2v4M12 18v4M4.93 4.93l2.83 2.83M16.24 16.24l2.83 2.83M2 12h4M18 12h4M4.93 19.07l2.83-2.83M16.24 7.76l2.83-2.83"/></svg> 生成中...';
        exportBtn.disabled = true;

        try {
          // Get current viewport dimensions
          const viewportHeight = window.innerHeight;
          const viewportWidth = window.innerWidth;
          const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
          
          // Create a temporary container for visible content only
          const tempContainer = document.createElement('div');
          tempContainer.style.position = 'absolute';
          tempContainer.style.left = '-9999px';
          tempContainer.style.width = viewportWidth + 'px';
          tempContainer.style.height = viewportHeight + 'px';
          tempContainer.style.overflow = 'hidden';
          
          // Clone the page wrapper
          const pageWrapper = document.querySelector('.page-wrapper');
          const clonedContent = pageWrapper.cloneNode(true);
          
          // Adjust the cloned content to show only visible part
          clonedContent.style.position = 'relative';
          clonedContent.style.top = -scrollTop + 'px';
          
          tempContainer.appendChild(clonedContent);
          document.body.appendChild(tempContainer);

          // Configure options for PDF export
          const options = {
            margin:       [0.3, 0.3, 0.3, 0.3], // Small margins
            filename:     `GOSIM-Hangzhou-2025-${new Date().toISOString().split('T')[0]}.pdf`,
            image:        { 
              type: 'jpeg', 
              quality: 0.95 
            },
            html2canvas:  { 
              scale: 2,
              useCORS: true,
              logging: false,
              width: viewportWidth,
              height: viewportHeight,
              windowWidth: viewportWidth,
              windowHeight: viewportHeight,
              scrollX: 0,
              scrollY: 0
            },
            jsPDF:        { 
              unit: 'px', 
              format: [viewportWidth * 0.75, viewportHeight * 0.75], // Scale down to fit PDF
              orientation: viewportWidth > viewportHeight ? 'landscape' : 'portrait'
            }
          };

          // Generate PDF from the temporary container
          await html2pdf().set(options).from(tempContainer).save();

          // Clean up
          document.body.removeChild(tempContainer);

        } catch (error) {
          console.error('PDF export failed:', error);
          alert('PDF导出失败，请重试');
        } finally {
          // Restore button
          exportBtn.innerHTML = originalContent;
          exportBtn.disabled = false;
        }
      });
    }
  });

  // Alternative simpler method - export exactly what's visible
  window.exportVisibleArea = function() {
    const exportBtn = document.getElementById('export-pdf-btn');
    const originalContent = exportBtn.innerHTML;
    exportBtn.innerHTML = '<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M12 2v4M12 18v4M4.93 4.93l2.83 2.83M16.24 16.24l2.83 2.83M2 12h4M18 12h4M4.93 19.07l2.83-2.83M16.24 7.76l2.83-2.83"/></svg> 生成中...';
    exportBtn.disabled = true;

    // Use html2canvas to capture only the visible viewport
    import('html2canvas').then(({ default: html2canvas }) => {
      html2canvas(document.body, {
        x: window.scrollX,
        y: window.scrollY,
        width: window.innerWidth,
        height: window.innerHeight,
        windowWidth: window.innerWidth,
        windowHeight: window.innerHeight,
      }).then(canvas => {
        // Convert canvas to PDF
        import('jspdf').then(({ jsPDF }) => {
          const pdf = new jsPDF({
            orientation: window.innerWidth > window.innerHeight ? 'l' : 'p',
            unit: 'px',
            format: [window.innerWidth, window.innerHeight]
          });
          
          const imgData = canvas.toDataURL('image/jpeg', 0.95);
          pdf.addImage(imgData, 'JPEG', 0, 0, window.innerWidth, window.innerHeight);
          pdf.save(`GOSIM-Viewport-${new Date().toISOString().split('T')[0]}.pdf`);
          
          // Restore button
          exportBtn.innerHTML = originalContent;
          exportBtn.disabled = false;
        });
      });
    });
  };
</script>